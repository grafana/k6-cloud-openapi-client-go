/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// TestRunCost - Test run cost details.
type TestRunCost struct {
	TestCost *TestCost
}

// TestCostAsTestRunCost is a convenience function that returns TestCost wrapped in TestRunCost
func TestCostAsTestRunCost(v *TestCost) TestRunCost {
	return TestRunCost{
		TestCost: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestRunCost) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TestCost
	err = newStrictDecoder(data).Decode(&dst.TestCost)
	if err == nil {
		jsonTestCost, _ := json.Marshal(dst.TestCost)
		if string(jsonTestCost) == "{}" { // empty struct
			dst.TestCost = nil
		} else {
			if err = validator.Validate(dst.TestCost); err != nil {
				dst.TestCost = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestCost = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TestCost = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestRunCost)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestRunCost)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestRunCost) MarshalJSON() ([]byte, error) {
	if src.TestCost != nil {
		return json.Marshal(&src.TestCost)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestRunCost) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TestCost != nil {
		return obj.TestCost
	}

	// all schemas are nil
	return nil
}

type NullableTestRunCost struct {
	value *TestRunCost
	isSet bool
}

func (v NullableTestRunCost) Get() *TestRunCost {
	return v.value
}

func (v *NullableTestRunCost) Set(val *TestRunCost) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunCost) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunCost(val *TestRunCost) *NullableTestRunCost {
	return &NullableTestRunCost{value: val, isSet: true}
}

func (v NullableTestRunCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
