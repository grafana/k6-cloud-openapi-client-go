/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// ScheduleEnds - When given, determines when the schedule will end. Either `on_date` or `after_runs` must be provided but not both. If null, the schedule runs forever.
type ScheduleEnds struct {
	ScheduleEnds *ScheduleEnds
}

// ScheduleEndsAsScheduleEnds is a convenience function that returns ScheduleEnds wrapped in ScheduleEnds
func ScheduleEndsAsScheduleEnds(v *ScheduleEnds) ScheduleEnds {
	return ScheduleEnds{
		ScheduleEnds: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScheduleEnds) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ScheduleEnds
	err = newStrictDecoder(data).Decode(&dst.ScheduleEnds)
	if err == nil {
		jsonScheduleEnds, _ := json.Marshal(dst.ScheduleEnds)
		if string(jsonScheduleEnds) == "{}" { // empty struct
			dst.ScheduleEnds = nil
		} else {
			if err = validator.Validate(dst.ScheduleEnds); err != nil {
				dst.ScheduleEnds = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduleEnds = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ScheduleEnds = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScheduleEnds)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScheduleEnds)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScheduleEnds) MarshalJSON() ([]byte, error) {
	if src.ScheduleEnds != nil {
		return json.Marshal(&src.ScheduleEnds)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScheduleEnds) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ScheduleEnds != nil {
		return obj.ScheduleEnds
	}

	// all schemas are nil
	return nil
}

type NullableScheduleEnds struct {
	value *ScheduleEnds
	isSet bool
}

func (v NullableScheduleEnds) Get() *ScheduleEnds {
	return v.value
}

func (v *NullableScheduleEnds) Set(val *ScheduleEnds) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleEnds) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleEnds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleEnds(val *ScheduleEnds) *NullableScheduleEnds {
	return &NullableScheduleEnds{value: val, isSet: true}
}

func (v NullableScheduleEnds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleEnds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
