/*
Grafana Cloud k6

HTTP API for interacting with Grafana Cloud k6.

API version: 1.4.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CreateScheduleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateScheduleRequest{}

// CreateScheduleRequest struct for CreateScheduleRequest
type CreateScheduleRequest struct {
	// The timezone-aware date on which the schedule will start running the test.
	Starts               time.Time                      `json:"starts"`
	RecurrenceRule       NullableScheduleRecurrenceRule `json:"recurrence_rule"`
	AdditionalProperties map[string]interface{}
}

type _CreateScheduleRequest CreateScheduleRequest

// NewCreateScheduleRequest instantiates a new CreateScheduleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateScheduleRequest(starts time.Time, recurrenceRule NullableScheduleRecurrenceRule) *CreateScheduleRequest {
	this := CreateScheduleRequest{}
	this.Starts = starts
	this.RecurrenceRule = recurrenceRule
	return &this
}

// NewCreateScheduleRequestWithDefaults instantiates a new CreateScheduleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateScheduleRequestWithDefaults() *CreateScheduleRequest {
	this := CreateScheduleRequest{}
	return &this
}

// GetStarts returns the Starts field value
func (o *CreateScheduleRequest) GetStarts() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Starts
}

// GetStartsOk returns a tuple with the Starts field value
// and a boolean to check if the value has been set.
func (o *CreateScheduleRequest) GetStartsOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Starts, true
}

// SetStarts sets field value
func (o *CreateScheduleRequest) SetStarts(v time.Time) {
	o.Starts = v
}

// GetRecurrenceRule returns the RecurrenceRule field value
// If the value is explicit nil, the zero value for ScheduleRecurrenceRule will be returned
func (o *CreateScheduleRequest) GetRecurrenceRule() ScheduleRecurrenceRule {
	if o == nil || o.RecurrenceRule.Get() == nil {
		var ret ScheduleRecurrenceRule
		return ret
	}

	return *o.RecurrenceRule.Get()
}

// GetRecurrenceRuleOk returns a tuple with the RecurrenceRule field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateScheduleRequest) GetRecurrenceRuleOk() (*ScheduleRecurrenceRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurrenceRule.Get(), o.RecurrenceRule.IsSet()
}

// SetRecurrenceRule sets field value
func (o *CreateScheduleRequest) SetRecurrenceRule(v ScheduleRecurrenceRule) {
	o.RecurrenceRule.Set(&v)
}

func (o CreateScheduleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateScheduleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["starts"] = o.Starts
	toSerialize["recurrence_rule"] = o.RecurrenceRule.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateScheduleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"starts",
		"recurrence_rule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateScheduleRequest := _CreateScheduleRequest{}

	err = json.Unmarshal(data, &varCreateScheduleRequest)

	if err != nil {
		return err
	}

	*o = CreateScheduleRequest(varCreateScheduleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "starts")
		delete(additionalProperties, "recurrence_rule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateScheduleRequest struct {
	value *CreateScheduleRequest
	isSet bool
}

func (v NullableCreateScheduleRequest) Get() *CreateScheduleRequest {
	return v.value
}

func (v *NullableCreateScheduleRequest) Set(val *CreateScheduleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateScheduleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateScheduleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateScheduleRequest(val *CreateScheduleRequest) *NullableCreateScheduleRequest {
	return &NullableCreateScheduleRequest{value: val, isSet: true}
}

func (v NullableCreateScheduleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateScheduleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
