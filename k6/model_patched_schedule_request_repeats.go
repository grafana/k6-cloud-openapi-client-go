/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// PatchedScheduleRequestRepeats - Schedule recurrence settings. If null, the test will run only once on the `starts` date.
type PatchedScheduleRequestRepeats struct {
	ScheduleRepeatsRequest *ScheduleRepeatsRequest
}

// ScheduleRepeatsRequestAsPatchedScheduleRequestRepeats is a convenience function that returns ScheduleRepeatsRequest wrapped in PatchedScheduleRequestRepeats
func ScheduleRepeatsRequestAsPatchedScheduleRequestRepeats(v *ScheduleRepeatsRequest) PatchedScheduleRequestRepeats {
	return PatchedScheduleRequestRepeats{
		ScheduleRepeatsRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchedScheduleRequestRepeats) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ScheduleRepeatsRequest
	err = newStrictDecoder(data).Decode(&dst.ScheduleRepeatsRequest)
	if err == nil {
		jsonScheduleRepeatsRequest, _ := json.Marshal(dst.ScheduleRepeatsRequest)
		if string(jsonScheduleRepeatsRequest) == "{}" { // empty struct
			dst.ScheduleRepeatsRequest = nil
		} else {
			if err = validator.Validate(dst.ScheduleRepeatsRequest); err != nil {
				dst.ScheduleRepeatsRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduleRepeatsRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ScheduleRepeatsRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PatchedScheduleRequestRepeats)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PatchedScheduleRequestRepeats)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchedScheduleRequestRepeats) MarshalJSON() ([]byte, error) {
	if src.ScheduleRepeatsRequest != nil {
		return json.Marshal(&src.ScheduleRepeatsRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchedScheduleRequestRepeats) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ScheduleRepeatsRequest != nil {
		return obj.ScheduleRepeatsRequest
	}

	// all schemas are nil
	return nil
}

type NullablePatchedScheduleRequestRepeats struct {
	value *PatchedScheduleRequestRepeats
	isSet bool
}

func (v NullablePatchedScheduleRequestRepeats) Get() *PatchedScheduleRequestRepeats {
	return v.value
}

func (v *NullablePatchedScheduleRequestRepeats) Set(val *PatchedScheduleRequestRepeats) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedScheduleRequestRepeats) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedScheduleRequestRepeats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedScheduleRequestRepeats(val *PatchedScheduleRequestRepeats) *NullablePatchedScheduleRequestRepeats {
	return &NullablePatchedScheduleRequestRepeats{value: val, isSet: true}
}

func (v NullablePatchedScheduleRequestRepeats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedScheduleRequestRepeats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
