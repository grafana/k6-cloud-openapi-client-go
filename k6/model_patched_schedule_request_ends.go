/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"fmt"

	"gopkg.in/validator.v2"
)

// PatchedScheduleRequestEnds - When given, determines when the schedule will end. Either `on_date` or `after_runs` must be provided but not both. If null, the schedule runs forever.
type PatchedScheduleRequestEnds struct {
	ScheduleEndsRequest *ScheduleEndsRequest
}

// ScheduleEndsRequestAsPatchedScheduleRequestEnds is a convenience function that returns ScheduleEndsRequest wrapped in PatchedScheduleRequestEnds
func ScheduleEndsRequestAsPatchedScheduleRequestEnds(v *ScheduleEndsRequest) PatchedScheduleRequestEnds {
	return PatchedScheduleRequestEnds{
		ScheduleEndsRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchedScheduleRequestEnds) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ScheduleEndsRequest
	err = newStrictDecoder(data).Decode(&dst.ScheduleEndsRequest)
	if err == nil {
		jsonScheduleEndsRequest, _ := json.Marshal(dst.ScheduleEndsRequest)
		if string(jsonScheduleEndsRequest) == "{}" { // empty struct
			dst.ScheduleEndsRequest = nil
		} else {
			if err = validator.Validate(dst.ScheduleEndsRequest); err != nil {
				dst.ScheduleEndsRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScheduleEndsRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ScheduleEndsRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PatchedScheduleRequestEnds)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PatchedScheduleRequestEnds)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchedScheduleRequestEnds) MarshalJSON() ([]byte, error) {
	if src.ScheduleEndsRequest != nil {
		return json.Marshal(&src.ScheduleEndsRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchedScheduleRequestEnds) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ScheduleEndsRequest != nil {
		return obj.ScheduleEndsRequest
	}

	// all schemas are nil
	return nil
}

type NullablePatchedScheduleRequestEnds struct {
	value *PatchedScheduleRequestEnds
	isSet bool
}

func (v NullablePatchedScheduleRequestEnds) Get() *PatchedScheduleRequestEnds {
	return v.value
}

func (v *NullablePatchedScheduleRequestEnds) Set(val *PatchedScheduleRequestEnds) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedScheduleRequestEnds) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedScheduleRequestEnds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedScheduleRequestEnds(val *PatchedScheduleRequestEnds) *NullablePatchedScheduleRequestEnds {
	return &NullablePatchedScheduleRequestEnds{value: val, isSet: true}
}

func (v NullablePatchedScheduleRequestEnds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedScheduleRequestEnds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
