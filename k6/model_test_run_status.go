/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"time"
)

// checks if the TestRunStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunStatus{}

// TestRunStatus struct for TestRunStatus
type TestRunStatus struct {
	// Type of the test run status.
	Type string `json:"type"`
	// Date and time when the test run entered the status.
	Entered              time.Time           `json:"entered"`
	Extra                *TestRunStatusExtra `json:"extra,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TestRunStatus TestRunStatus

// NewTestRunStatus instantiates a new TestRunStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunStatus(type_ string, entered time.Time) *TestRunStatus {
	this := TestRunStatus{}
	this.Type = type_
	this.Entered = entered
	return &this
}

// NewTestRunStatusWithDefaults instantiates a new TestRunStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunStatusWithDefaults() *TestRunStatus {
	this := TestRunStatus{}
	return &this
}

// GetType returns the Type field value
func (o *TestRunStatus) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TestRunStatus) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TestRunStatus) SetType(v string) {
	o.Type = v
}

// GetEntered returns the Entered field value
func (o *TestRunStatus) GetEntered() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Entered
}

// GetEnteredOk returns a tuple with the Entered field value
// and a boolean to check if the value has been set.
func (o *TestRunStatus) GetEnteredOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entered, true
}

// SetEntered sets field value
func (o *TestRunStatus) SetEntered(v time.Time) {
	o.Entered = v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *TestRunStatus) GetExtra() TestRunStatusExtra {
	if o == nil || IsNil(o.Extra) {
		var ret TestRunStatusExtra
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRunStatus) GetExtraOk() (*TestRunStatusExtra, bool) {
	if o == nil || IsNil(o.Extra) {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *TestRunStatus) HasExtra() bool {
	if o != nil && !IsNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given TestRunStatusExtra and assigns it to the Extra field.
func (o *TestRunStatus) SetExtra(v TestRunStatusExtra) {
	o.Extra = &v
}

func (o TestRunStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["entered"] = o.Entered
	if !IsNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestRunStatus) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varTestRunStatus := _TestRunStatus{}

	err = json.Unmarshal(data, &varTestRunStatus)

	if err != nil {
		return err
	}

	*o = TestRunStatus(varTestRunStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "entered")
		delete(additionalProperties, "extra")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestRunStatus struct {
	value *TestRunStatus
	isSet bool
}

func (v NullableTestRunStatus) Get() *TestRunStatus {
	return v.value
}

func (v *NullableTestRunStatus) Set(val *TestRunStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunStatus(val *TestRunStatus) *NullableTestRunStatus {
	return &NullableTestRunStatus{value: val, isSet: true}
}

func (v NullableTestRunStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
