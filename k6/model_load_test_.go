/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"time"
)

// checks if the LoadTest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadTest{}

// LoadTest struct for LoadTest
type LoadTest struct {
	// Id of the load test
	Id int32 `json:"id"`
	// Id of the parent project
	ProjectId int32 `json:"project_id"`
	// Unique name of the test within the project
	Name string `json:"name"`
	// Id of a baseline test run used for results comparison
	BaselineTestRunId int32 `json:"baseline_test_run_id"`
	// The date when the test was created
	Created time.Time `json:"created"`
	// The date when the test was last time updated
	Updated              time.Time `json:"updated"`
	AdditionalProperties map[string]interface{}
}

type _LoadTest LoadTest

// NewLoadTest instantiates a new LoadTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadTest(id int32, projectId int32, name string, baselineTestRunId int32, created time.Time, updated time.Time) *LoadTest {
	this := LoadTest{}
	this.Id = id
	this.ProjectId = projectId
	this.Name = name
	this.BaselineTestRunId = baselineTestRunId
	this.Created = created
	this.Updated = updated
	return &this
}

// NewLoadTestWithDefaults instantiates a new LoadTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadTestWithDefaults() *LoadTest {
	this := LoadTest{}
	return &this
}

// GetId returns the Id field value
func (o *LoadTest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LoadTest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LoadTest) SetId(v int32) {
	o.Id = v
}

// GetProjectId returns the ProjectId field value
func (o *LoadTest) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *LoadTest) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *LoadTest) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetName returns the Name field value
func (o *LoadTest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LoadTest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LoadTest) SetName(v string) {
	o.Name = v
}

// GetBaselineTestRunId returns the BaselineTestRunId field value
func (o *LoadTest) GetBaselineTestRunId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BaselineTestRunId
}

// GetBaselineTestRunIdOk returns a tuple with the BaselineTestRunId field value
// and a boolean to check if the value has been set.
func (o *LoadTest) GetBaselineTestRunIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaselineTestRunId, true
}

// SetBaselineTestRunId sets field value
func (o *LoadTest) SetBaselineTestRunId(v int32) {
	o.BaselineTestRunId = v
}

// GetCreated returns the Created field value
func (o *LoadTest) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *LoadTest) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *LoadTest) SetCreated(v time.Time) {
	o.Created = v
}

// GetUpdated returns the Updated field value
func (o *LoadTest) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *LoadTest) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *LoadTest) SetUpdated(v time.Time) {
	o.Updated = v
}

func (o LoadTest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["project_id"] = o.ProjectId
	toSerialize["name"] = o.Name
	toSerialize["baseline_test_run_id"] = o.BaselineTestRunId
	toSerialize["created"] = o.Created
	toSerialize["updated"] = o.Updated

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoadTest) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varLoadTest := _LoadTest{}

	err = json.Unmarshal(data, &varLoadTest)

	if err != nil {
		return err
	}

	*o = LoadTest(varLoadTest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "baseline_test_run_id")
		delete(additionalProperties, "created")
		delete(additionalProperties, "updated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoadTest struct {
	value *LoadTest
	isSet bool
}

func (v NullableLoadTest) Get() *LoadTest {
	return v.value
}

func (v *NullableLoadTest) Set(val *LoadTest) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadTest) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadTest(val *LoadTest) *NullableLoadTest {
	return &NullableLoadTest{value: val, isSet: true}
}

func (v NullableLoadTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
