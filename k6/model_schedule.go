/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"time"
)

// checks if the Schedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schedule{}

// Schedule struct for Schedule
type Schedule struct {
	// Id of the schedule.
	Id int32 `json:"id"`
	// Id of the test to run.
	LoadTestId int32 `json:"load_test_id"`
	// Id of the schedule.
	Active bool `json:"active"`
	// The date after which the schedule will start running the test.
	Starts  time.Time       `json:"starts"`
	Repeats ScheduleRepeats `json:"repeats"`
	Ends    ScheduleEnds    `json:"ends"`
	// The date of the next scheduled test run. If the schedule is inactive or past the end date or all runs have been used up, the value is null.
	NextRun              time.Time `json:"next_run"`
	AdditionalProperties map[string]interface{}
}

type _Schedule Schedule

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule(id int32, loadTestId int32, active bool, starts time.Time, repeats ScheduleRepeats, ends ScheduleEnds, nextRun time.Time) *Schedule {
	this := Schedule{}
	this.Id = id
	this.LoadTestId = loadTestId
	this.Active = active
	this.Starts = starts
	this.Repeats = repeats
	this.Ends = ends
	this.NextRun = nextRun
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	return &this
}

// GetId returns the Id field value
func (o *Schedule) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Schedule) SetId(v int32) {
	o.Id = v
}

// GetLoadTestId returns the LoadTestId field value
func (o *Schedule) GetLoadTestId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LoadTestId
}

// GetLoadTestIdOk returns a tuple with the LoadTestId field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetLoadTestIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadTestId, true
}

// SetLoadTestId sets field value
func (o *Schedule) SetLoadTestId(v int32) {
	o.LoadTestId = v
}

// GetActive returns the Active field value
func (o *Schedule) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Schedule) SetActive(v bool) {
	o.Active = v
}

// GetStarts returns the Starts field value
func (o *Schedule) GetStarts() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Starts
}

// GetStartsOk returns a tuple with the Starts field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetStartsOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Starts, true
}

// SetStarts sets field value
func (o *Schedule) SetStarts(v time.Time) {
	o.Starts = v
}

// GetRepeats returns the Repeats field value
func (o *Schedule) GetRepeats() ScheduleRepeats {
	if o == nil {
		var ret ScheduleRepeats
		return ret
	}

	return o.Repeats
}

// GetRepeatsOk returns a tuple with the Repeats field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetRepeatsOk() (*ScheduleRepeats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repeats, true
}

// SetRepeats sets field value
func (o *Schedule) SetRepeats(v ScheduleRepeats) {
	o.Repeats = v
}

// GetEnds returns the Ends field value
func (o *Schedule) GetEnds() ScheduleEnds {
	if o == nil {
		var ret ScheduleEnds
		return ret
	}

	return o.Ends
}

// GetEndsOk returns a tuple with the Ends field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetEndsOk() (*ScheduleEnds, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ends, true
}

// SetEnds sets field value
func (o *Schedule) SetEnds(v ScheduleEnds) {
	o.Ends = v
}

// GetNextRun returns the NextRun field value
func (o *Schedule) GetNextRun() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NextRun
}

// GetNextRunOk returns a tuple with the NextRun field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetNextRunOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextRun, true
}

// SetNextRun sets field value
func (o *Schedule) SetNextRun(v time.Time) {
	o.NextRun = v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["load_test_id"] = o.LoadTestId
	toSerialize["active"] = o.Active
	toSerialize["starts"] = o.Starts
	toSerialize["repeats"] = o.Repeats
	toSerialize["ends"] = o.Ends
	toSerialize["next_run"] = o.NextRun

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Schedule) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varSchedule := _Schedule{}

	err = json.Unmarshal(data, &varSchedule)

	if err != nil {
		return err
	}

	*o = Schedule(varSchedule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "load_test_id")
		delete(additionalProperties, "active")
		delete(additionalProperties, "starts")
		delete(additionalProperties, "repeats")
		delete(additionalProperties, "ends")
		delete(additionalProperties, "next_run")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
