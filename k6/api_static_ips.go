/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// StaticIpsAPIService StaticIpsAPI service
type StaticIpsAPIService service

type ApiStaticIpsAcquireCreateRequest struct {
	ctx                    context.Context
	ApiService             *StaticIpsAPIService
	xStackId               *string
	staticIPAcquireRequest *StaticIPAcquireRequest
}

// Numeric ID of the Grafana stack representing the request scope. - If the API is called with a *Personal API token*, the user must be a member of the specified stack. - If the API is called with a *Grafana Stack API token*, the value must be the ID of the corresponding stack.
func (r ApiStaticIpsAcquireCreateRequest) XStackId(xStackId string) ApiStaticIpsAcquireCreateRequest {
	r.xStackId = &xStackId
	return r
}

func (r ApiStaticIpsAcquireCreateRequest) StaticIPAcquireRequest(staticIPAcquireRequest StaticIPAcquireRequest) ApiStaticIpsAcquireCreateRequest {
	r.staticIPAcquireRequest = &staticIPAcquireRequest
	return r
}

func (r ApiStaticIpsAcquireCreateRequest) Execute() (*StaticIPList, *http.Response, error) {
	return r.ApiService.StaticIpsAcquireCreateExecute(r)
}

/*
StaticIpsAcquireCreate Method for StaticIpsAcquireCreate

Acquire multiple static IPs in the provided load zones.

Static IPs are allocated asynchronously. The IP addresses will be available only after
the provisioning status is `provisioned`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStaticIpsAcquireCreateRequest
*/
func (a *StaticIpsAPIService) StaticIpsAcquireCreate(ctx context.Context) ApiStaticIpsAcquireCreateRequest {
	return ApiStaticIpsAcquireCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StaticIPList
func (a *StaticIpsAPIService) StaticIpsAcquireCreateExecute(r ApiStaticIpsAcquireCreateRequest) (*StaticIPList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StaticIPList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StaticIpsAPIService.StaticIpsAcquireCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/static_ips/acquire"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xStackId == nil {
		return localVarReturnValue, nil, reportError("xStackId is required and must be specified")
	}
	if r.staticIPAcquireRequest == nil {
		return localVarReturnValue, nil, reportError("staticIPAcquireRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Stack-Id", r.xStackId, "simple", "")
	// body params
	localVarPostBody = r.staticIPAcquireRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStaticIpsListRequest struct {
	ctx        context.Context
	ApiService *StaticIpsAPIService
	xStackId   *string
	count      *bool
	orderby    *string
	skip       *int32
	top        *int32
}

// Numeric ID of the Grafana stack representing the request scope. - If the API is called with a *Personal API token*, the user must be a member of the specified stack. - If the API is called with a *Grafana Stack API token*, the value must be the ID of the corresponding stack.
func (r ApiStaticIpsListRequest) XStackId(xStackId string) ApiStaticIpsListRequest {
	r.xStackId = &xStackId
	return r
}

// Include collection length in the response object as &#39;@count&#39;.
func (r ApiStaticIpsListRequest) Count(count bool) ApiStaticIpsListRequest {
	r.count = &count
	return r
}

// Comma separated list of fields to use when ordering the results. The default order is ascending and can be reversed by appending &#x60;desc&#x60; specifier. Available fields: - load_zone - provisioning_status
func (r ApiStaticIpsListRequest) Orderby(orderby string) ApiStaticIpsListRequest {
	r.orderby = &orderby
	return r
}

// The initial index from which to return the results.
func (r ApiStaticIpsListRequest) Skip(skip int32) ApiStaticIpsListRequest {
	r.skip = &skip
	return r
}

// Number of results to return per page.
func (r ApiStaticIpsListRequest) Top(top int32) ApiStaticIpsListRequest {
	r.top = &top
	return r
}

func (r ApiStaticIpsListRequest) Execute() (*PaginatedStaticIPList, *http.Response, error) {
	return r.ApiService.StaticIpsListExecute(r)
}

/*
StaticIpsList Method for StaticIpsList

List all static IPs.

IP addresses for the newly acquired static IPs will not be available until the provisioning
status is `provisioned`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStaticIpsListRequest
*/
func (a *StaticIpsAPIService) StaticIpsList(ctx context.Context) ApiStaticIpsListRequest {
	return ApiStaticIpsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedStaticIPList
func (a *StaticIpsAPIService) StaticIpsListExecute(r ApiStaticIpsListRequest) (*PaginatedStaticIPList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedStaticIPList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StaticIpsAPIService.StaticIpsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/static_ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xStackId == nil {
		return localVarReturnValue, nil, reportError("xStackId is required and must be specified")
	}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$count", r.count, "form", "")
	}
	if r.orderby != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$orderby", r.orderby, "form", "")
	} else {
		var defaultValue string = "load_zone"
		r.orderby = &defaultValue
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$skip", r.skip, "form", "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$top", r.top, "form", "")
	} else {
		var defaultValue int32 = 1000
		r.top = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Stack-Id", r.xStackId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStaticIpsReleaseCreateRequest struct {
	ctx                    context.Context
	ApiService             *StaticIpsAPIService
	xStackId               *string
	staticIPReleaseRequest *StaticIPReleaseRequest
}

// Numeric ID of the Grafana stack representing the request scope. - If the API is called with a *Personal API token*, the user must be a member of the specified stack. - If the API is called with a *Grafana Stack API token*, the value must be the ID of the corresponding stack.
func (r ApiStaticIpsReleaseCreateRequest) XStackId(xStackId string) ApiStaticIpsReleaseCreateRequest {
	r.xStackId = &xStackId
	return r
}

func (r ApiStaticIpsReleaseCreateRequest) StaticIPReleaseRequest(staticIPReleaseRequest StaticIPReleaseRequest) ApiStaticIpsReleaseCreateRequest {
	r.staticIPReleaseRequest = &staticIPReleaseRequest
	return r
}

func (r ApiStaticIpsReleaseCreateRequest) Execute() (*StaticIPList, *http.Response, error) {
	return r.ApiService.StaticIpsReleaseCreateExecute(r)
}

/*
StaticIpsReleaseCreate Method for StaticIpsReleaseCreate

Release and eventually delete multiple static IPs.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStaticIpsReleaseCreateRequest
*/
func (a *StaticIpsAPIService) StaticIpsReleaseCreate(ctx context.Context) ApiStaticIpsReleaseCreateRequest {
	return ApiStaticIpsReleaseCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StaticIPList
func (a *StaticIpsAPIService) StaticIpsReleaseCreateExecute(r ApiStaticIpsReleaseCreateRequest) (*StaticIPList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StaticIPList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StaticIpsAPIService.StaticIpsReleaseCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/static_ips/release"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xStackId == nil {
		return localVarReturnValue, nil, reportError("xStackId is required and must be specified")
	}
	if r.staticIPReleaseRequest == nil {
		return localVarReturnValue, nil, reportError("staticIPReleaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Stack-Id", r.xStackId, "simple", "")
	// body params
	localVarPostBody = r.staticIPReleaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
