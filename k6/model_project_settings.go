/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
)

// checks if the ProjectSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSettings{}

// ProjectSettings struct for ProjectSettings
type ProjectSettings struct {
	// Max amount of virtual user hours (VUh) used per one calendar month.
	VuhMaxPerMonth NullableInt32 `json:"vuh_max_per_month"`
	// Max number of concurrent virtual users (VUs) used in one test.
	VuMaxPerTest NullableInt32 `json:"vu_max_per_test"`
	// Max number of concurrent browser virtual users (VUs) used in one test.
	VuBrowserMaxPerTest NullableInt32 `json:"vu_browser_max_per_test"`
	// Max duration of a test in seconds.
	DurationMaxPerTest   NullableInt32 `json:"duration_max_per_test"`
	AdditionalProperties map[string]interface{}
}

type _ProjectSettings ProjectSettings

// NewProjectSettings instantiates a new ProjectSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSettings(vuhMaxPerMonth NullableInt32, vuMaxPerTest NullableInt32, vuBrowserMaxPerTest NullableInt32, durationMaxPerTest NullableInt32) *ProjectSettings {
	this := ProjectSettings{}
	this.VuhMaxPerMonth = vuhMaxPerMonth
	this.VuMaxPerTest = vuMaxPerTest
	this.VuBrowserMaxPerTest = vuBrowserMaxPerTest
	this.DurationMaxPerTest = durationMaxPerTest
	return &this
}

// NewProjectSettingsWithDefaults instantiates a new ProjectSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSettingsWithDefaults() *ProjectSettings {
	this := ProjectSettings{}
	return &this
}

// GetVuhMaxPerMonth returns the VuhMaxPerMonth field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ProjectSettings) GetVuhMaxPerMonth() int32 {
	if o == nil || o.VuhMaxPerMonth.Get() == nil {
		var ret int32
		return ret
	}

	return *o.VuhMaxPerMonth.Get()
}

// GetVuhMaxPerMonthOk returns a tuple with the VuhMaxPerMonth field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectSettings) GetVuhMaxPerMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VuhMaxPerMonth.Get(), o.VuhMaxPerMonth.IsSet()
}

// SetVuhMaxPerMonth sets field value
func (o *ProjectSettings) SetVuhMaxPerMonth(v int32) {
	o.VuhMaxPerMonth.Set(&v)
}

// GetVuMaxPerTest returns the VuMaxPerTest field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ProjectSettings) GetVuMaxPerTest() int32 {
	if o == nil || o.VuMaxPerTest.Get() == nil {
		var ret int32
		return ret
	}

	return *o.VuMaxPerTest.Get()
}

// GetVuMaxPerTestOk returns a tuple with the VuMaxPerTest field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectSettings) GetVuMaxPerTestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VuMaxPerTest.Get(), o.VuMaxPerTest.IsSet()
}

// SetVuMaxPerTest sets field value
func (o *ProjectSettings) SetVuMaxPerTest(v int32) {
	o.VuMaxPerTest.Set(&v)
}

// GetVuBrowserMaxPerTest returns the VuBrowserMaxPerTest field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ProjectSettings) GetVuBrowserMaxPerTest() int32 {
	if o == nil || o.VuBrowserMaxPerTest.Get() == nil {
		var ret int32
		return ret
	}

	return *o.VuBrowserMaxPerTest.Get()
}

// GetVuBrowserMaxPerTestOk returns a tuple with the VuBrowserMaxPerTest field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectSettings) GetVuBrowserMaxPerTestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VuBrowserMaxPerTest.Get(), o.VuBrowserMaxPerTest.IsSet()
}

// SetVuBrowserMaxPerTest sets field value
func (o *ProjectSettings) SetVuBrowserMaxPerTest(v int32) {
	o.VuBrowserMaxPerTest.Set(&v)
}

// GetDurationMaxPerTest returns the DurationMaxPerTest field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ProjectSettings) GetDurationMaxPerTest() int32 {
	if o == nil || o.DurationMaxPerTest.Get() == nil {
		var ret int32
		return ret
	}

	return *o.DurationMaxPerTest.Get()
}

// GetDurationMaxPerTestOk returns a tuple with the DurationMaxPerTest field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectSettings) GetDurationMaxPerTestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationMaxPerTest.Get(), o.DurationMaxPerTest.IsSet()
}

// SetDurationMaxPerTest sets field value
func (o *ProjectSettings) SetDurationMaxPerTest(v int32) {
	o.DurationMaxPerTest.Set(&v)
}

func (o ProjectSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vuh_max_per_month"] = o.VuhMaxPerMonth.Get()
	toSerialize["vu_max_per_test"] = o.VuMaxPerTest.Get()
	toSerialize["vu_browser_max_per_test"] = o.VuBrowserMaxPerTest.Get()
	toSerialize["duration_max_per_test"] = o.DurationMaxPerTest.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProjectSettings) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varProjectSettings := _ProjectSettings{}

	err = json.Unmarshal(data, &varProjectSettings)

	if err != nil {
		return err
	}

	*o = ProjectSettings(varProjectSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vuh_max_per_month")
		delete(additionalProperties, "vu_max_per_test")
		delete(additionalProperties, "vu_browser_max_per_test")
		delete(additionalProperties, "duration_max_per_test")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProjectSettings struct {
	value *ProjectSettings
	isSet bool
}

func (v NullableProjectSettings) Get() *ProjectSettings {
	return v.value
}

func (v *NullableProjectSettings) Set(val *ProjectSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSettings(val *ProjectSettings) *NullableProjectSettings {
	return &NullableProjectSettings{value: val, isSet: true}
}

func (v NullableProjectSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
