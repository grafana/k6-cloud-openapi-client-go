/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
)

// checks if the TestRunUpdateNoteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunUpdateNoteRequest{}

// TestRunUpdateNoteRequest struct for TestRunUpdateNoteRequest
type TestRunUpdateNoteRequest struct {
	// User-defined note for the test run.
	Value                NullableString `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _TestRunUpdateNoteRequest TestRunUpdateNoteRequest

// NewTestRunUpdateNoteRequest instantiates a new TestRunUpdateNoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunUpdateNoteRequest(value NullableString) *TestRunUpdateNoteRequest {
	this := TestRunUpdateNoteRequest{}
	this.Value = value
	return &this
}

// NewTestRunUpdateNoteRequestWithDefaults instantiates a new TestRunUpdateNoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunUpdateNoteRequestWithDefaults() *TestRunUpdateNoteRequest {
	this := TestRunUpdateNoteRequest{}
	return &this
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TestRunUpdateNoteRequest) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunUpdateNoteRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *TestRunUpdateNoteRequest) SetValue(v string) {
	o.Value.Set(&v)
}

func (o TestRunUpdateNoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunUpdateNoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestRunUpdateNoteRequest) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varTestRunUpdateNoteRequest := _TestRunUpdateNoteRequest{}

	err = json.Unmarshal(data, &varTestRunUpdateNoteRequest)

	if err != nil {
		return err
	}

	*o = TestRunUpdateNoteRequest(varTestRunUpdateNoteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestRunUpdateNoteRequest struct {
	value *TestRunUpdateNoteRequest
	isSet bool
}

func (v NullableTestRunUpdateNoteRequest) Get() *TestRunUpdateNoteRequest {
	return v.value
}

func (v *NullableTestRunUpdateNoteRequest) Set(val *TestRunUpdateNoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunUpdateNoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunUpdateNoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunUpdateNoteRequest(val *TestRunUpdateNoteRequest) *NullableTestRunUpdateNoteRequest {
	return &NullableTestRunUpdateNoteRequest{value: val, isSet: true}
}

func (v NullableTestRunUpdateNoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunUpdateNoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
