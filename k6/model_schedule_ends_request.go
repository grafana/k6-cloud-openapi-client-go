/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"time"
)

// checks if the ScheduleEndsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleEndsRequest{}

// ScheduleEndsRequest struct for ScheduleEndsRequest
type ScheduleEndsRequest struct {
	// A datetime instance specifying the upper-bound limit of the recurrence.
	OnDate *time.Time `json:"on_date,omitempty"`
	// Determines how many times the schedule will start the test.
	AfterRuns            *int32 `json:"after_runs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScheduleEndsRequest ScheduleEndsRequest

// NewScheduleEndsRequest instantiates a new ScheduleEndsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleEndsRequest() *ScheduleEndsRequest {
	this := ScheduleEndsRequest{}
	return &this
}

// NewScheduleEndsRequestWithDefaults instantiates a new ScheduleEndsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleEndsRequestWithDefaults() *ScheduleEndsRequest {
	this := ScheduleEndsRequest{}
	return &this
}

// GetOnDate returns the OnDate field value if set, zero value otherwise.
func (o *ScheduleEndsRequest) GetOnDate() time.Time {
	if o == nil || IsNil(o.OnDate) {
		var ret time.Time
		return ret
	}
	return *o.OnDate
}

// GetOnDateOk returns a tuple with the OnDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEndsRequest) GetOnDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OnDate) {
		return nil, false
	}
	return o.OnDate, true
}

// HasOnDate returns a boolean if a field has been set.
func (o *ScheduleEndsRequest) HasOnDate() bool {
	if o != nil && !IsNil(o.OnDate) {
		return true
	}

	return false
}

// SetOnDate gets a reference to the given time.Time and assigns it to the OnDate field.
func (o *ScheduleEndsRequest) SetOnDate(v time.Time) {
	o.OnDate = &v
}

// GetAfterRuns returns the AfterRuns field value if set, zero value otherwise.
func (o *ScheduleEndsRequest) GetAfterRuns() int32 {
	if o == nil || IsNil(o.AfterRuns) {
		var ret int32
		return ret
	}
	return *o.AfterRuns
}

// GetAfterRunsOk returns a tuple with the AfterRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleEndsRequest) GetAfterRunsOk() (*int32, bool) {
	if o == nil || IsNil(o.AfterRuns) {
		return nil, false
	}
	return o.AfterRuns, true
}

// HasAfterRuns returns a boolean if a field has been set.
func (o *ScheduleEndsRequest) HasAfterRuns() bool {
	if o != nil && !IsNil(o.AfterRuns) {
		return true
	}

	return false
}

// SetAfterRuns gets a reference to the given int32 and assigns it to the AfterRuns field.
func (o *ScheduleEndsRequest) SetAfterRuns(v int32) {
	o.AfterRuns = &v
}

func (o ScheduleEndsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleEndsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnDate) {
		toSerialize["on_date"] = o.OnDate
	}
	if !IsNil(o.AfterRuns) {
		toSerialize["after_runs"] = o.AfterRuns
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScheduleEndsRequest) UnmarshalJSON(data []byte) (err error) {
	varScheduleEndsRequest := _ScheduleEndsRequest{}

	err = json.Unmarshal(data, &varScheduleEndsRequest)

	if err != nil {
		return err
	}

	*o = ScheduleEndsRequest(varScheduleEndsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "on_date")
		delete(additionalProperties, "after_runs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScheduleEndsRequest struct {
	value *ScheduleEndsRequest
	isSet bool
}

func (v NullableScheduleEndsRequest) Get() *ScheduleEndsRequest {
	return v.value
}

func (v *NullableScheduleEndsRequest) Set(val *ScheduleEndsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleEndsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleEndsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleEndsRequest(val *ScheduleEndsRequest) *NullableScheduleEndsRequest {
	return &NullableScheduleEndsRequest{value: val, isSet: true}
}

func (v NullableScheduleEndsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleEndsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
