/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
)

// checks if the TestCostBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestCostBreakdown{}

// TestCostBreakdown struct for TestCostBreakdown
type TestCostBreakdown struct {
	// Number of VUh charged for the protocol part of the test run.
	ProtocolVuh float64 `json:"protocol_vuh"`
	// Number of VUh charged for the browser part of the test run.
	BrowserVuh           float64 `json:"browser_vuh"`
	AdditionalProperties map[string]interface{}
}

type _TestCostBreakdown TestCostBreakdown

// NewTestCostBreakdown instantiates a new TestCostBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestCostBreakdown(protocolVuh float64, browserVuh float64) *TestCostBreakdown {
	this := TestCostBreakdown{}
	this.ProtocolVuh = protocolVuh
	this.BrowserVuh = browserVuh
	return &this
}

// NewTestCostBreakdownWithDefaults instantiates a new TestCostBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestCostBreakdownWithDefaults() *TestCostBreakdown {
	this := TestCostBreakdown{}
	return &this
}

// GetProtocolVuh returns the ProtocolVuh field value
func (o *TestCostBreakdown) GetProtocolVuh() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ProtocolVuh
}

// GetProtocolVuhOk returns a tuple with the ProtocolVuh field value
// and a boolean to check if the value has been set.
func (o *TestCostBreakdown) GetProtocolVuhOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolVuh, true
}

// SetProtocolVuh sets field value
func (o *TestCostBreakdown) SetProtocolVuh(v float64) {
	o.ProtocolVuh = v
}

// GetBrowserVuh returns the BrowserVuh field value
func (o *TestCostBreakdown) GetBrowserVuh() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BrowserVuh
}

// GetBrowserVuhOk returns a tuple with the BrowserVuh field value
// and a boolean to check if the value has been set.
func (o *TestCostBreakdown) GetBrowserVuhOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrowserVuh, true
}

// SetBrowserVuh sets field value
func (o *TestCostBreakdown) SetBrowserVuh(v float64) {
	o.BrowserVuh = v
}

func (o TestCostBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestCostBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol_vuh"] = o.ProtocolVuh
	toSerialize["browser_vuh"] = o.BrowserVuh

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestCostBreakdown) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varTestCostBreakdown := _TestCostBreakdown{}

	err = json.Unmarshal(data, &varTestCostBreakdown)

	if err != nil {
		return err
	}

	*o = TestCostBreakdown(varTestCostBreakdown)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol_vuh")
		delete(additionalProperties, "browser_vuh")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestCostBreakdown struct {
	value *TestCostBreakdown
	isSet bool
}

func (v NullableTestCostBreakdown) Get() *TestCostBreakdown {
	return v.value
}

func (v *NullableTestCostBreakdown) Set(val *TestCostBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCostBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCostBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCostBreakdown(val *TestCostBreakdown) *NullableTestCostBreakdown {
	return &NullableTestCostBreakdown{value: val, isSet: true}
}

func (v NullableTestCostBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCostBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
