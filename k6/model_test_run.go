/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
	"time"
)

// checks if the TestRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRun{}

// TestRun struct for TestRun
type TestRun struct {
	// Id of the test run.
	Id int32 `json:"id"`
	// Id of the parent test.
	TestId int32 `json:"test_id"`
	// Id of the parent project.
	ProjectId int32 `json:"project_id"`
	// Id of the user who started the test if started with a user token.
	StartedBy int32 `json:"started_by"`
	// Date and time when the test run was started.
	Created time.Time `json:"created"`
	// Date and time when the test run ended. Unset if the test is still running.
	Ended time.Time `json:"ended"`
	// User-defined note for the test run.
	Note string `json:"note"`
	// The expiry date of test run results retention beyond which the data is automatically deleted if the test tun is not saved, otherwise - null.
	RetentionExpiry time.Time   `json:"retention_expiry"`
	Cost            TestRunCost `json:"cost"`
	// Current test run status.
	Status string `json:"status"`
	// Details of the current test run status.
	StatusDetails TestRunStatus `json:"status_details"`
	// List of test run status objects sorted by enter time representing the status history.
	StatusHistory []TestRunStatus `json:"status_history"`
	// Test run result. If thresholds are defined and have been tainted, the result is `'passed'`, otherwise - `'failed'`. If the execution had not completed successfully, the result is `'error'`. The result is available only after the test is no longer running, otherwise it is `null`.
	Result string `json:"result"`
	// Test run result details.
	ResultDetails map[string]interface{} `json:"result_details"`
	// List the load zones the test runs in and the corresponding load distribution percent.
	Distribution []TestRunDistribution `json:"distribution"`
	// The original options object if available.
	Options              map[string]interface{} `json:"options"`
	AdditionalProperties map[string]interface{}
}

type _TestRun TestRun

// NewTestRun instantiates a new TestRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRun(id int32, testId int32, projectId int32, startedBy int32, created time.Time, ended time.Time, note string, retentionExpiry time.Time, cost TestRunCost, status string, statusDetails TestRunStatus, statusHistory []TestRunStatus, result string, resultDetails map[string]interface{}, distribution []TestRunDistribution, options map[string]interface{}) *TestRun {
	this := TestRun{}
	this.Id = id
	this.TestId = testId
	this.ProjectId = projectId
	this.StartedBy = startedBy
	this.Created = created
	this.Ended = ended
	this.Note = note
	this.RetentionExpiry = retentionExpiry
	this.Cost = cost
	this.Status = status
	this.StatusDetails = statusDetails
	this.StatusHistory = statusHistory
	this.Result = result
	this.ResultDetails = resultDetails
	this.Distribution = distribution
	this.Options = options
	return &this
}

// NewTestRunWithDefaults instantiates a new TestRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunWithDefaults() *TestRun {
	this := TestRun{}
	return &this
}

// GetId returns the Id field value
func (o *TestRun) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestRun) SetId(v int32) {
	o.Id = v
}

// GetTestId returns the TestId field value
func (o *TestRun) GetTestId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetTestIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestId, true
}

// SetTestId sets field value
func (o *TestRun) SetTestId(v int32) {
	o.TestId = v
}

// GetProjectId returns the ProjectId field value
func (o *TestRun) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *TestRun) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetStartedBy returns the StartedBy field value
func (o *TestRun) GetStartedBy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartedBy
}

// GetStartedByOk returns a tuple with the StartedBy field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetStartedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedBy, true
}

// SetStartedBy sets field value
func (o *TestRun) SetStartedBy(v int32) {
	o.StartedBy = v
}

// GetCreated returns the Created field value
func (o *TestRun) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *TestRun) SetCreated(v time.Time) {
	o.Created = v
}

// GetEnded returns the Ended field value
func (o *TestRun) GetEnded() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Ended
}

// GetEndedOk returns a tuple with the Ended field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetEndedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ended, true
}

// SetEnded sets field value
func (o *TestRun) SetEnded(v time.Time) {
	o.Ended = v
}

// GetNote returns the Note field value
func (o *TestRun) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *TestRun) SetNote(v string) {
	o.Note = v
}

// GetRetentionExpiry returns the RetentionExpiry field value
func (o *TestRun) GetRetentionExpiry() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RetentionExpiry
}

// GetRetentionExpiryOk returns a tuple with the RetentionExpiry field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetRetentionExpiryOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetentionExpiry, true
}

// SetRetentionExpiry sets field value
func (o *TestRun) SetRetentionExpiry(v time.Time) {
	o.RetentionExpiry = v
}

// GetCost returns the Cost field value
func (o *TestRun) GetCost() TestRunCost {
	if o == nil {
		var ret TestRunCost
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetCostOk() (*TestRunCost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cost, true
}

// SetCost sets field value
func (o *TestRun) SetCost(v TestRunCost) {
	o.Cost = v
}

// GetStatus returns the Status field value
func (o *TestRun) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TestRun) SetStatus(v string) {
	o.Status = v
}

// GetStatusDetails returns the StatusDetails field value
func (o *TestRun) GetStatusDetails() TestRunStatus {
	if o == nil {
		var ret TestRunStatus
		return ret
	}

	return o.StatusDetails
}

// GetStatusDetailsOk returns a tuple with the StatusDetails field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetStatusDetailsOk() (*TestRunStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusDetails, true
}

// SetStatusDetails sets field value
func (o *TestRun) SetStatusDetails(v TestRunStatus) {
	o.StatusDetails = v
}

// GetStatusHistory returns the StatusHistory field value
func (o *TestRun) GetStatusHistory() []TestRunStatus {
	if o == nil {
		var ret []TestRunStatus
		return ret
	}

	return o.StatusHistory
}

// GetStatusHistoryOk returns a tuple with the StatusHistory field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetStatusHistoryOk() ([]TestRunStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusHistory, true
}

// SetStatusHistory sets field value
func (o *TestRun) SetStatusHistory(v []TestRunStatus) {
	o.StatusHistory = v
}

// GetResult returns the Result field value
func (o *TestRun) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *TestRun) SetResult(v string) {
	o.Result = v
}

// GetResultDetails returns the ResultDetails field value
func (o *TestRun) GetResultDetails() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ResultDetails
}

// GetResultDetailsOk returns a tuple with the ResultDetails field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetResultDetailsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ResultDetails, true
}

// SetResultDetails sets field value
func (o *TestRun) SetResultDetails(v map[string]interface{}) {
	o.ResultDetails = v
}

// GetDistribution returns the Distribution field value
func (o *TestRun) GetDistribution() []TestRunDistribution {
	if o == nil {
		var ret []TestRunDistribution
		return ret
	}

	return o.Distribution
}

// GetDistributionOk returns a tuple with the Distribution field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetDistributionOk() ([]TestRunDistribution, bool) {
	if o == nil {
		return nil, false
	}
	return o.Distribution, true
}

// SetDistribution sets field value
func (o *TestRun) SetDistribution(v []TestRunDistribution) {
	o.Distribution = v
}

// GetOptions returns the Options field value
func (o *TestRun) GetOptions() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *TestRun) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *TestRun) SetOptions(v map[string]interface{}) {
	o.Options = v
}

func (o TestRun) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["test_id"] = o.TestId
	toSerialize["project_id"] = o.ProjectId
	toSerialize["started_by"] = o.StartedBy
	toSerialize["created"] = o.Created
	toSerialize["ended"] = o.Ended
	toSerialize["note"] = o.Note
	toSerialize["retention_expiry"] = o.RetentionExpiry
	toSerialize["cost"] = o.Cost
	toSerialize["status"] = o.Status
	toSerialize["status_details"] = o.StatusDetails
	toSerialize["status_history"] = o.StatusHistory
	toSerialize["result"] = o.Result
	toSerialize["result_details"] = o.ResultDetails
	toSerialize["distribution"] = o.Distribution
	toSerialize["options"] = o.Options

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestRun) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varTestRun := _TestRun{}

	err = json.Unmarshal(data, &varTestRun)

	if err != nil {
		return err
	}

	*o = TestRun(varTestRun)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "test_id")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "started_by")
		delete(additionalProperties, "created")
		delete(additionalProperties, "ended")
		delete(additionalProperties, "note")
		delete(additionalProperties, "retention_expiry")
		delete(additionalProperties, "cost")
		delete(additionalProperties, "status")
		delete(additionalProperties, "status_details")
		delete(additionalProperties, "status_history")
		delete(additionalProperties, "result")
		delete(additionalProperties, "result_details")
		delete(additionalProperties, "distribution")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestRun struct {
	value *TestRun
	isSet bool
}

func (v NullableTestRun) Get() *TestRun {
	return v.value
}

func (v *NullableTestRun) Set(val *TestRun) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRun) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRun(val *TestRun) *NullableTestRun {
	return &NullableTestRun{value: val, isSet: true}
}

func (v NullableTestRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
