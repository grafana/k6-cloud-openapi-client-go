/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
)

// checks if the TestCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestCost{}

// TestCost struct for TestCost
type TestCost struct {
	// Total number of VUh charged for the test run.
	TotalVuh float64 `json:"total_vuh"`
	// Breakdown details of the test cost.
	Breakdown            TestCostBreakdown `json:"breakdown"`
	AdditionalProperties map[string]interface{}
}

type _TestCost TestCost

// NewTestCost instantiates a new TestCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestCost(totalVuh float64, breakdown TestCostBreakdown) *TestCost {
	this := TestCost{}
	this.TotalVuh = totalVuh
	this.Breakdown = breakdown
	return &this
}

// NewTestCostWithDefaults instantiates a new TestCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestCostWithDefaults() *TestCost {
	this := TestCost{}
	return &this
}

// GetTotalVuh returns the TotalVuh field value
func (o *TestCost) GetTotalVuh() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalVuh
}

// GetTotalVuhOk returns a tuple with the TotalVuh field value
// and a boolean to check if the value has been set.
func (o *TestCost) GetTotalVuhOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalVuh, true
}

// SetTotalVuh sets field value
func (o *TestCost) SetTotalVuh(v float64) {
	o.TotalVuh = v
}

// GetBreakdown returns the Breakdown field value
func (o *TestCost) GetBreakdown() TestCostBreakdown {
	if o == nil {
		var ret TestCostBreakdown
		return ret
	}

	return o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value
// and a boolean to check if the value has been set.
func (o *TestCost) GetBreakdownOk() (*TestCostBreakdown, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Breakdown, true
}

// SetBreakdown sets field value
func (o *TestCost) SetBreakdown(v TestCostBreakdown) {
	o.Breakdown = v
}

func (o TestCost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total_vuh"] = o.TotalVuh
	toSerialize["breakdown"] = o.Breakdown

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestCost) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varTestCost := _TestCost{}

	err = json.Unmarshal(data, &varTestCost)

	if err != nil {
		return err
	}

	*o = TestCost(varTestCost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "total_vuh")
		delete(additionalProperties, "breakdown")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestCost struct {
	value *TestCost
	isSet bool
}

func (v NullableTestCost) Get() *TestCost {
	return v.value
}

func (v *NullableTestCost) Set(val *TestCost) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCost) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCost(val *TestCost) *NullableTestCost {
	return &NullableTestCost{value: val, isSet: true}
}

func (v NullableTestCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
