/*


HTTP API for interacting with k6 Cloud.

API version: 0.0.0
Contact: info@grafana.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k6

import (
	"encoding/json"
)

// checks if the StaticIPAcquireRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaticIPAcquireRequest{}

// StaticIPAcquireRequest struct for StaticIPAcquireRequest
type StaticIPAcquireRequest struct {
	// List of the load zones with the number of IPs to acquire.
	LoadZones            []StaticIPAcquireLoadZoneRequest `json:"load_zones"`
	AdditionalProperties map[string]interface{}
}

type _StaticIPAcquireRequest StaticIPAcquireRequest

// NewStaticIPAcquireRequest instantiates a new StaticIPAcquireRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticIPAcquireRequest(loadZones []StaticIPAcquireLoadZoneRequest) *StaticIPAcquireRequest {
	this := StaticIPAcquireRequest{}
	this.LoadZones = loadZones
	return &this
}

// NewStaticIPAcquireRequestWithDefaults instantiates a new StaticIPAcquireRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticIPAcquireRequestWithDefaults() *StaticIPAcquireRequest {
	this := StaticIPAcquireRequest{}
	return &this
}

// GetLoadZones returns the LoadZones field value
func (o *StaticIPAcquireRequest) GetLoadZones() []StaticIPAcquireLoadZoneRequest {
	if o == nil {
		var ret []StaticIPAcquireLoadZoneRequest
		return ret
	}

	return o.LoadZones
}

// GetLoadZonesOk returns a tuple with the LoadZones field value
// and a boolean to check if the value has been set.
func (o *StaticIPAcquireRequest) GetLoadZonesOk() ([]StaticIPAcquireLoadZoneRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoadZones, true
}

// SetLoadZones sets field value
func (o *StaticIPAcquireRequest) SetLoadZones(v []StaticIPAcquireLoadZoneRequest) {
	o.LoadZones = v
}

func (o StaticIPAcquireRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaticIPAcquireRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["load_zones"] = o.LoadZones

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StaticIPAcquireRequest) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varStaticIPAcquireRequest := _StaticIPAcquireRequest{}

	err = json.Unmarshal(data, &varStaticIPAcquireRequest)

	if err != nil {
		return err
	}

	*o = StaticIPAcquireRequest(varStaticIPAcquireRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "load_zones")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStaticIPAcquireRequest struct {
	value *StaticIPAcquireRequest
	isSet bool
}

func (v NullableStaticIPAcquireRequest) Get() *StaticIPAcquireRequest {
	return v.value
}

func (v *NullableStaticIPAcquireRequest) Set(val *StaticIPAcquireRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticIPAcquireRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticIPAcquireRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticIPAcquireRequest(val *StaticIPAcquireRequest) *NullableStaticIPAcquireRequest {
	return &NullableStaticIPAcquireRequest{value: val, isSet: true}
}

func (v NullableStaticIPAcquireRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticIPAcquireRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
